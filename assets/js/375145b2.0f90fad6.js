"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4090],{1743:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=s(4848),i=s(8453);const l={sidebar_position:3},r="Methods",d={id:"usage/methods",title:"Methods",description:"Promised based rolls",source:"@site/docs/usage/methods.md",sourceDirName:"usage",slug:"/usage/methods",permalink:"/docs/usage/methods",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/methods.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Common Objects",permalink:"/docs/usage/objects"},next:{title:"Callbacks",permalink:"/docs/usage/callbacks"}},o={},c=[{value:"Promised based rolls",id:"promised-based-rolls",level:2},{value:"Roll",id:"roll",level:2},{value:"Example",id:"example",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Options",id:"options",level:3},{value:"Add",id:"add",level:2},{value:"Example",id:"example-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Reroll",id:"reroll",level:2},{value:"Example",id:"example-2",level:3},{value:"Arguments",id:"arguments-2",level:3},{value:"Options",id:"options-1",level:3},{value:"Remove",id:"remove",level:2},{value:"Example",id:"example-3",level:3},{value:"Arguments",id:"arguments-3",level:3},{value:"Clear",id:"clear",level:2},{value:"Hide",id:"hide",level:2},{value:"Arguments",id:"arguments-4",level:3},{value:"Show",id:"show",level:2},{value:"Get Roll Results",id:"get-roll-results",level:2},{value:"Update Config",id:"update-config",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h2,{id:"promised-based-rolls",children:"Promised based rolls"}),"\n",(0,t.jsxs)(n.p,{children:["The methods ",(0,t.jsx)(n.code,{children:".roll()"}),",",(0,t.jsx)(n.code,{children:".add()"}),", ",(0,t.jsx)(n.code,{children:".reroll()"})," and ",(0,t.jsx)(n.code,{children:".remove()"})," are all methods that return a promise containing the results of the dice rolled by the callee. So it is possible to write ",(0,t.jsx)(n.code,{children:"diceBox.roll('4d6').then(results => console.log(results))"}),". Results can also be retrieved from the ",(0,t.jsx)(n.code,{children:"onRollComplete"})," callback event or by using the ",(0,t.jsx)(n.code,{children:".getRollResults()"})," method (not a promise)."]}),"\n",(0,t.jsx)(n.h2,{id:"roll",children:"Roll"}),"\n",(0,t.jsxs)(n.p,{children:["A roll will clear current dice and start a new roll. Returns a promise with an array of ",(0,t.jsx)(n.em,{children:"die results"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"roll(notation:mixed, options = {theme:string, newStartPoint:boolean})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.roll('2d20',{theme:'rust'})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"notation"}),(0,t.jsx)(n.td,{children:"string | array | notation object | array of notation objects"}),(0,t.jsx)(n.td,{children:"n\\a"}),(0,t.jsx)(n.td,{children:"See notation description"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"options"}),(0,t.jsx)(n.td,{children:"object"}),(0,t.jsx)(n.td,{children:"see options"}),(0,t.jsx)(n.td,{children:"options that can be set with each roll"})]})]})]}),"\n",(0,t.jsxs)(n.admonition,{title:"Notation",type:"info",children:[(0,t.jsx)(n.p,{children:"The notation argument can accept the following roll formats"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["simple string notation described as 'number of dice' + 'd' + 'number of sides on the die'. e.g.: ",(0,t.jsx)(n.code,{children:"5d6"})," rolls five six-sided dice."]}),"\n",(0,t.jsxs)(n.li,{children:["an array of string notation. e.g.: ",(0,t.jsx)(n.code,{children:"['2d10','2d6']"})]}),"\n",(0,t.jsxs)(n.li,{children:["a Roll Object as described above. e.g.:",(0,t.jsx)(n.code,{children:"{qty: 5, sides: 10}"})]}),"\n",(0,t.jsxs)(n.li,{children:["an array of Roll Objects. e.g.:",(0,t.jsx)(n.code,{children:"[{qty: 2, sides: 10},{qty: 1, sides: 6}]"})," |"]}),"\n",(0,t.jsxs)(n.li,{children:["a mixed array of Roll Objects and string notation. e.g.:",(0,t.jsx)(n.code,{children:"[{qty: 2, sides: 10},'2d8']"})]}),"\n"]})]}),"\n",(0,t.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Key"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"theme"}),(0,t.jsx)(n.td,{children:"string - optional"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"undefined"})}),(0,t.jsxs)(n.td,{children:["the ",(0,t.jsx)(n.em,{children:"systemName"})," of a theme for the roll. This value will override theme values that appear in the notation object"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"newStartPoint"}),(0,t.jsx)(n.td,{children:"boolean - optional"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"will toss the collection of dice in from a new point along the edge of the box"})]})]})]}),"\n",(0,t.jsx)(n.admonition,{title:"Themes",type:"info",children:(0,t.jsxs)(n.p,{children:["Themes can be specified in four different places. On the config object at initialization, as an options parameter when using ",(0,t.jsx)(n.code,{children:".roll()"})," or ",(0,t.jsx)(n.code,{children:".add()"}),", as specified in a ",(0,t.jsx)(n.em,{children:"roll object"})," and as specified in a ",(0,t.jsx)(n.em,{children:"die result object"}),". Themes are applied in the order of ",(0,t.jsx)(n.em,{children:"options parameter"})," first, ",(0,t.jsx)(n.em,{children:"roll object"})," or ",(0,t.jsx)(n.em,{children:"die result object"})," second and box ",(0,t.jsx)(n.em,{children:"config option"})," third. The ",(0,t.jsx)(n.em,{children:"roll object"})," and ",(0,t.jsx)(n.em,{children:"die result object"})," are processed at the same level."]})}),"\n",(0,t.jsx)(n.h2,{id:"add",children:"Add"}),"\n",(0,t.jsxs)(n.p,{children:["This method will add the specified notation to the current roll in a new roll group. Returns a promise with an array of ",(0,t.jsx)(n.em,{children:"die results"})," for the dice that were added."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"add(notation:mixed, options = {theme:string, newStartPoint:boolean})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.add([{qty: 2, sides: 8},'1d6'],{newStartPoint: false})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"arguments-1",children:"Arguments"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"notation"}),(0,t.jsx)(n.td,{children:"string | array | notation object | array of notation objects"}),(0,t.jsx)(n.td,{children:"n\\a"}),(0,t.jsxs)(n.td,{children:["Same as ",(0,t.jsx)(n.code,{children:"roll"})," notation description"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"options"}),(0,t.jsx)(n.td,{children:"object"}),(0,t.jsxs)(n.td,{children:["see ",(0,t.jsx)(n.code,{children:"roll"})," options"]}),(0,t.jsx)(n.td,{children:"options that can be set with each roll"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"reroll",children:"Reroll"}),"\n",(0,t.jsx)(n.p,{children:"This method will reroll a die. Returns a promise with an array of die results for the dice that were rerolled."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"reroll(notation:mixed, options = {remove:boolean, newStartPoint:boolean})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.reroll({groupId: 0,rollId: 2})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"arguments-2",children:"Arguments"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"notation"}),(0,t.jsx)(n.td,{children:"notation object | array of notation objects"}),(0,t.jsx)(n.td,{children:"n\\a"}),(0,t.jsxs)(n.td,{children:["See notation note below. Valid notation includes objects returned from ",(0,t.jsx)(n.code,{children:"roll"})," and ",(0,t.jsx)(n.code,{children:"add"})," promises."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"options"}),(0,t.jsx)(n.td,{children:"object"}),(0,t.jsx)(n.td,{children:"see options"}),(0,t.jsx)(n.td,{children:"options that can be set with each roll"})]})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"notation"})," argument here requires an roll object or an array of roll objects identifying the roll group ",(0,t.jsx)(n.code,{children:"groupId"})," and die ",(0,t.jsx)(n.code,{children:"rollId"})," you wish to reroll. Die result objects from previous rolls are valid arguments and can be passed in to trigger a reroll."]})}),"\n",(0,t.jsx)(n.h3,{id:"options-1",children:"Options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Key"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"remove"}),(0,t.jsx)(n.td,{children:"boolean - optional"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsx)(n.td,{children:"indicates the die being rerolled should be removed from the scene"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"newStartPoint"}),(0,t.jsx)(n.td,{children:"boolean - optional"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"will toss the collection of dice in from a new point along the edge of the box"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"remove",children:"Remove"}),"\n",(0,t.jsx)(n.p,{children:"Remove dice from the scene. Returns a promise with an array of die results for the dice that were removed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"remove(notation:mixed)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.remove({groupId: 0,rollId: 2})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"arguments-3",children:"Arguments"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"notation"}),(0,t.jsx)(n.td,{children:"notation object | array of notation objects"}),(0,t.jsx)(n.td,{children:"n\\a"}),(0,t.jsxs)(n.td,{children:["Same as ",(0,t.jsx)(n.code,{children:"reroll"})," notation description"]})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"clear",children:"Clear"}),"\n",(0,t.jsx)(n.p,{children:"This will clear all dice from the scene."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.clear()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"hide",children:"Hide"}),"\n",(0,t.jsxs)(n.p,{children:["This will hide the canvas element that the Dice-Box is rendered to. If a ",(0,t.jsx)(n.code,{children:"className"})," is provided, then it will be added to the ",(0,t.jsx)(n.code,{children:"<canvas>"})," element in order to enable a CSS based transition. If no ",(0,t.jsx)(n.code,{children:"className"})," is provided then visibility is toggled off without an effect."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.hide(className:string)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"arguments-4",children:"Arguments"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Argument"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"className"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"n\\a"}),(0,t.jsx)(n.td,{children:"Sets a CSS class on the canvas in order to use CSS transition effects for hide."})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"show",children:"Show"}),"\n",(0,t.jsxs)(n.p,{children:["This will show the canvas element that the Dice-Box is rendered to. If a ",(0,t.jsx)(n.code,{children:"className"})," was defined on ",(0,t.jsx)(n.code,{children:"hide()"})," then this class name will be removed from the canvas to reverse the hide effect. Otherwise visibility is toggled on."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.show()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"get-roll-results",children:"Get Roll Results"}),"\n",(0,t.jsx)(n.p,{children:"Get the results of all the dice in the scene at anytime. However, if dice are still rolling they will not have a value yet."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.getRollResults() // returns an array of roll result objects\n"})}),"\n",(0,t.jsx)(n.h2,{id:"update-config",children:"Update Config"}),"\n",(0,t.jsxs)(n.p,{children:["Use this method to update any of the ",(0,t.jsx)(n.a,{href:"/docs/usage/config#configuration-options",children:"config settings"}),". Most settings will be applied immediately, but theme/dice color changes will only take effect before or after a roll."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"diceBox.updateConfig({configObject})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var t=s(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);