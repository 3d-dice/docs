"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7054],{4457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=n(4848),o=n(8453);const s={sidebar_position:2},l="Common Objects",r={id:"usage/objects",title:"Common Objects",description:"Roll Object",source:"@site/docs/usage/objects.md",sourceDirName:"usage",slug:"/usage/objects",permalink:"/docs/usage/objects",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/objects.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/usage/config"},next:{title:"Methods",permalink:"/docs/usage/methods"}},a={},d=[{value:"Roll Object",id:"roll-object",level:2},{value:"Individual Die Result Object",id:"individual-die-result-object",level:2},{value:"Roll Result Array Object",id:"roll-result-array-object",level:2},{value:"What&#39;s the difference between <code>groupId</code>, and <code>rollId</code>?",id:"whats-the-difference-between-groupid-and-rollid",level:3},{value:"Theme Config Object",id:"theme-config-object",level:2}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"common-objects",children:"Common Objects"}),"\n",(0,i.jsx)(t.h2,{id:"roll-object",children:"Roll Object"}),"\n",(0,i.jsxs)(t.p,{children:["The roll object is whats required by the ",(0,i.jsx)(t.code,{children:"roll"})," and ",(0,i.jsx)(t.code,{children:"add"})," methods. At a minimum you must specify the number of sides of the dice to be rolled."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"{\n  modifier: int,      // optional - the modifier (positive or negative) to be added to the final results\n  qty: int,           // optional - the number of dice to be rolled. Defaults to 1\n  sides: mixed,       // the type of die to be rolled. Either a number such as 20 or a die type such as \"fate\".\n  theme: string,      // optional - the theme's 'systemName' for this roll\n  themeColor: string  // optional - HEX value for the theme's material color\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"individual-die-result-object",children:"Individual Die Result Object"}),"\n",(0,i.jsxs)(t.p,{children:["When die results are returned they will contain the information listed below. Individual die results can then be passed back in to ",(0,i.jsx)(t.code,{children:"roll"}),", ",(0,i.jsx)(t.code,{children:"add"}),", ",(0,i.jsx)(t.code,{children:"reroll"})," and ",(0,i.jsx)(t.code,{children:"remove"})," methods as the notation argument."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"{\n  groupId: int,       // the roll group this die belongs to\n  rollId: int,        // the unique identifier for this die within the group\n  sides: int,         // the type of die\n  theme: string,      // the theme that was assigned to this die\n  themeColor: string  // optional - HEX value for the theme's material color\n  value: int,         // the result for this die\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"roll-result-array-object",children:"Roll Result Array Object"}),"\n",(0,i.jsxs)(t.p,{children:["The results object will contain an array of roll groups and the individual rolls made in those groups. For example, ",(0,i.jsx)(t.code,{children:"3d6"})," would create a ",(0,i.jsx)(t.em,{children:"roll group"})," with three ",(0,i.jsx)(t.em,{children:"rolls"})," in it."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"[\n  {                    // the roll group object\n    id: 0,             // the id of this group - should match the groupId of rolls\n    mods: [],          // the roll modifier\n    qty: int,          // the number of dice in this roll\n    rolls: [           // an array of Die Result Objects\n      {\n        groupId: int,\n        result: int,\n        rollId: int,\n        sides: int,\n        theme: string,\n        themeColor: string,\n      }\n    ],\n    sides: int,        // the type of die used\n    theme: string      // the theme for this group of dice\n    themeColor: string // the theme color for this group of dice\n    value: int         // the sum of the dice roll results and modifier\n  }\n]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The result object for ",(0,i.jsx)(t.code,{children:"3d6"})," will look something like this"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"[\n  {\n    groupId: 0,\n    mods: [],\n    qty: 3,\n    rolls: [\n      {\n        sides: 6,\n        groupId: 0,\n        rollId: 0,\n        theme: 'diceOfRolling',\n        themeColor: null,\n        value: 5\n      },\n      {\n        sides: 6,\n        groupId: 0,\n        rollId: 1,\n        theme: 'diceOfRolling',\n        themeColor: null,\n        value: 2\n      },\n      {\n        sides: 6,\n        groupId: 0,\n        rollId: 2,\n        theme: 'diceOfRolling',\n        themeColor: null,\n        value: 3\n      }\n    ],\n    sides: 6,\n    value: 10\n  }\n]\n"})}),"\n",(0,i.jsxs)(t.h3,{id:"whats-the-difference-between-groupid-and-rollid",children:["What's the difference between ",(0,i.jsx)(t.code,{children:"groupId"}),", and ",(0,i.jsx)(t.code,{children:"rollId"}),"?"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"groupId"}),": the roll group this die is a part of. This becomes more useful with the advanced dice roller that accepts notations such as ",(0,i.jsx)(t.code,{children:"2d10+2d6"}),". In this case ",(0,i.jsx)(t.code,{children:"groupId: 0"})," would be assigned to the 2d10 and ",(0,i.jsx)(t.code,{children:"groupId: 1"})," would be assigned to the 2d6"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"rollId"}),": the id of the die within the group. By default this is incremented automatically by the dice roller, however there are cases where the rollId is assigned, such as exploding die. In this case, in order to make an association between the 'exploder' and the 'explodee' the rollId of the added die is set to a decimal value of the triggering die. For example with 1d6 that explodes twice:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"[\n  {\n    qty: 3,\n    sides: 6,\n    mods: [\n      {\n        type: 'explode',\n        target: null\n      }\n    ],\n    rolls: [\n      {\n        sides: 6,\n        groupId: 0,\n        rollId: 0,\n        theme: 'diceOfRolling',\n        themeColor: null,\n        value: 6\n      },\n      {\n        sides: 6,\n        groupId: 0,\n        rollId: 0.1,\n        theme: 'diceOfRolling',\n        themeColor: null,\n        value: 6\n      },\n      {\n        sides: 6,\n        groupId: 0,\n        rollId: 0.2,\n        theme: 'diceOfRolling',\n        themeColor: null,\n        value: 5\n      }\n    ],\n    id: 0,\n    value: 17\n  }\n]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"theme-config-object",children:"Theme Config Object"}),"\n",(0,i.jsx)(t.p,{children:"This object is required to load a theme"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"{\n  name: string,                  // the pretty name of this theme, can include spaces and special characters\n  systemName: string,            // required - the camelCased system name for this theme, used internally\n  extends: string,               // optional - The theme systemName this theme extends\n  author: string,                // optional - author of this theme\n  version: number,               // optional - version of this theme\n  thumbnail: string,             // optional - A rendered image of what this dice theme looks like\n  meshFile: string,              // the relative path and file name that contains the 3D mesh data for this theme. Only required if not using 'default' mesh. This can point to a shared mesh file located anywhere in static assets folder.\n  meshName: string,              // deprecated in v1.1 - the system name used for this theme's 3D models. Only required if not using 'default' mesh. If sharing a mesh file with another theme, then it should have the same meshName as the one it's sharing.\n  diceAvailable: [],             // required - a list of dice available (:string) with this theme.\n  material: {\n    type: string,                // required - the type of material being loaded for this theme\n    diffuseTexture: string || {  // either the relative path and file name of a texture file or an object\n      light: string,             // the relative path and file name of the 'light' texture used for HEX color based materials\n      dark: string               // the relative path and file name of the 'dark' texture used for HEX color based materials\n    },\n    diffuseLevel: float,         // optional - intensity or strength of the texture\n    bumpTexture: string,         // optional - the relative path and file name of a texture file\n    bumpLevel: float,            // optional - intensity or strength of the texture\n    specularTexture: string,     // optional - the relative path and file name of a texture file\n    specularPower: float         // optional - defines how sharp are the highlights in the material\n  },\n  themeColor: string,            // a HEX value to be applied to a color material.\n  d4FaceDown: false,             // optional - calculate the d4 value based on the downward facing 3D mesh face id\n}\n"})})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(6540);const o={},s=i.createContext(o);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);