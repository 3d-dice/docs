"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[372],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(a),c=l,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||r;return a?n.createElement(k,o(o({ref:t},s),{},{components:a})):n.createElement(k,o({ref:t},s))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4592:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m}});var n=a(3117),l=a(102),r=(a(7294),a(3905)),o=["components"],i={sidebar_position:3},d="Methods",p={unversionedId:"usage/methods",id:"usage/methods",title:"Methods",description:"Promised based rolls",source:"@site/docs/usage/methods.md",sourceDirName:"usage",slug:"/usage/methods",permalink:"/docs/usage/methods",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/methods.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Common Objects",permalink:"/docs/usage/objects"},next:{title:"Callbacks",permalink:"/docs/usage/callbacks"}},s={},m=[{value:"Promised based rolls",id:"promised-based-rolls",level:2},{value:"Roll",id:"roll",level:2},{value:"Example",id:"example",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Options",id:"options",level:3},{value:"Add",id:"add",level:2},{value:"Example",id:"example-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Reroll",id:"reroll",level:2},{value:"Example",id:"example-2",level:3},{value:"Arguments",id:"arguments-2",level:3},{value:"Options",id:"options-1",level:3},{value:"Remove",id:"remove",level:2},{value:"Example",id:"example-3",level:3},{value:"Arguments",id:"arguments-3",level:3},{value:"Clear",id:"clear",level:2},{value:"Hide",id:"hide",level:2},{value:"Show",id:"show",level:2},{value:"Get Roll Results",id:"get-roll-results",level:2},{value:"Update Config",id:"update-config",level:2}],u={toc:m};function c(e){var t=e.components,a=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"methods"},"Methods"),(0,r.kt)("h2",{id:"promised-based-rolls"},"Promised based rolls"),(0,r.kt)("p",null,"The methods ",(0,r.kt)("inlineCode",{parentName:"p"},".roll()"),",",(0,r.kt)("inlineCode",{parentName:"p"},".add()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".reroll()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".remove()")," are all methods that return a promise containing the results of the dice rolled by the callee. So it is possible to write ",(0,r.kt)("inlineCode",{parentName:"p"},"diceBox.roll('4d6').then(results => console.log(results))"),". Results can also be retrieved from the ",(0,r.kt)("inlineCode",{parentName:"p"},"onRollComplete")," callback event or by using the ",(0,r.kt)("inlineCode",{parentName:"p"},".getRollResults()")," method (not a promise)."),(0,r.kt)("h2",{id:"roll"},"Roll"),(0,r.kt)("p",null,"A roll will clear current dice and start a new roll. Returns a promise with an array of ",(0,r.kt)("em",{parentName:"p"},"die results")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"roll(notation:mixed, options = {theme:string, newStartPoint:boolean})\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.roll('2d20',{theme:'#4b8968'})\n")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"notation"),(0,r.kt)("td",{parentName:"tr",align:null},"string ","|"," array ","|"," notation object ","|"," array of notation objects"),(0,r.kt)("td",{parentName:"tr",align:null},"n\\a"),(0,r.kt)("td",{parentName:"tr",align:null},"See notation description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"see options"),(0,r.kt)("td",{parentName:"tr",align:null},"options that can be set with each roll")))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Notation")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The notation argument can accept the following roll formats"),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol"},"simple string notation described as 'number of dice' + 'd' + 'number of sides on the die'. e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},"5d6")," rolls five six-sided dice."),(0,r.kt)("li",{parentName:"ol"},"an array of string notation. e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},"['2d10','2d6']")),(0,r.kt)("li",{parentName:"ol"},"a Roll Object as described above. e.g.:",(0,r.kt)("inlineCode",{parentName:"li"},"{qty: 5, sides: 10}")),(0,r.kt)("li",{parentName:"ol"},"an array of Roll Objects. e.g.:",(0,r.kt)("inlineCode",{parentName:"li"},"[{qty: 2, sides: 10},{qty: 1, sides: 6}]")," |"),(0,r.kt)("li",{parentName:"ol"},"a mixed array of Roll Objects and string notation. e.g.:",(0,r.kt)("inlineCode",{parentName:"li"},"[{{qty: 2, sides: 10}},'2d8']"))))),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"theme"),(0,r.kt)("td",{parentName:"tr",align:null},"string - optional"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:null},"a named theme or HEX value for the roll. This value will override theme values that appear in the notation object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newStartPoint"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean - optional"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"will toss the dice in from a new point along the edge of the box")))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Themes")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Themes can be specified in four different places. On the config object at initialization, as an options parameter when using ",(0,r.kt)("inlineCode",{parentName:"p"},".roll()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".add()"),", as specified in a ",(0,r.kt)("em",{parentName:"p"},"roll object")," and as specified in a ",(0,r.kt)("em",{parentName:"p"},"die result object"),". Themes are applied in the order of ",(0,r.kt)("em",{parentName:"p"},"options parameter")," first, ",(0,r.kt)("em",{parentName:"p"},"roll object")," or ",(0,r.kt)("em",{parentName:"p"},"die result object")," second and box ",(0,r.kt)("em",{parentName:"p"},"config option")," third. The ",(0,r.kt)("em",{parentName:"p"},"roll object")," and ",(0,r.kt)("em",{parentName:"p"},"die result object")," are processed at the same level."))),(0,r.kt)("h2",{id:"add"},"Add"),(0,r.kt)("p",null,"This method will add the specified notation to the current roll in a new roll group. Returns a promise with an array of ",(0,r.kt)("em",{parentName:"p"},"die results")," for the dice that were added."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"add(notation:mixed, options = {theme:string, newStartPoint:boolean})\n")),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.add([{qty: 2, sides: 8},'1d6'],{newStartPoint: false})\n")),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"notation"),(0,r.kt)("td",{parentName:"tr",align:null},"string ","|"," array ","|"," notation object ","|"," array of notation objects"),(0,r.kt)("td",{parentName:"tr",align:null},"n\\a"),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("inlineCode",{parentName:"td"},"roll")," notation description")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"see ",(0,r.kt)("inlineCode",{parentName:"td"},"roll")," options"),(0,r.kt)("td",{parentName:"tr",align:null},"options that can be set with each roll")))),(0,r.kt)("h2",{id:"reroll"},"Reroll"),(0,r.kt)("p",null,"This method will reroll a die. Returns a promise with an array of die results for the dice that were rerolled. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"reroll(notation:mixed, options = {remove:boolean, newStartPoint:boolean})\n")),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.reroll({groupId: 0,rollId: 2})\n")),(0,r.kt)("h3",{id:"arguments-2"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"notation"),(0,r.kt)("td",{parentName:"tr",align:null},"notation object ","|"," array of notation objects"),(0,r.kt)("td",{parentName:"tr",align:null},"n\\a"),(0,r.kt)("td",{parentName:"tr",align:null},"See notation note below. Valid notation includes objects returned from ",(0,r.kt)("inlineCode",{parentName:"td"},"roll")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"add")," promises.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"see options"),(0,r.kt)("td",{parentName:"tr",align:null},"options that can be set with each roll")))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("strong",{parentName:"p"},"notation")," argument here requires an roll object or an array of roll objects identifying the roll group ",(0,r.kt)("inlineCode",{parentName:"p"},"groupId")," and die ",(0,r.kt)("inlineCode",{parentName:"p"},"rollId")," you wish to reroll. Die result objects from previous rolls are valid arguments and can be passed in to trigger a reroll."))),(0,r.kt)("h3",{id:"options-1"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"remove"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean - optional"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"indicates the die being rerolled should be removed from the scene")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newStartPoint"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean - optional"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"will toss the dice in from a new point along the edge of the box")))),(0,r.kt)("h2",{id:"remove"},"Remove"),(0,r.kt)("p",null,"Remove dice from the scene. Returns a promise with an array of die results for the dice that were removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"remove(notation:mixed)\n")),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.remove({groupId: 0,rollId: 2})\n")),(0,r.kt)("h3",{id:"arguments-3"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"notation"),(0,r.kt)("td",{parentName:"tr",align:null},"notation object ","|"," array of notation objects"),(0,r.kt)("td",{parentName:"tr",align:null},"n\\a"),(0,r.kt)("td",{parentName:"tr",align:null},"Same as ",(0,r.kt)("inlineCode",{parentName:"td"},"reroll")," notation description")))),(0,r.kt)("h2",{id:"clear"},"Clear"),(0,r.kt)("p",null,"This will clear all dice from the scene."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.clear()\n")),(0,r.kt)("h2",{id:"hide"},"Hide"),(0,r.kt)("p",null,"This will hide the canvas element that the Dice-Box is rendered to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.hide()\n")),(0,r.kt)("h2",{id:"show"},"Show"),(0,r.kt)("p",null,"This will show the canvas element that the Dice-Box is rendered to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.show()\n")),(0,r.kt)("h2",{id:"get-roll-results"},"Get Roll Results"),(0,r.kt)("p",null,"Get the results of all the dice in the scene at anytime. However, if dice are still rolling they will not have a value yet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.getRollResults() // returns an array of roll result objects\n")),(0,r.kt)("h2",{id:"update-config"},"Update Config"),(0,r.kt)("p",null,"Use this method to update any of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/usage/config#configuration-options"},"config settings"),". Most settings will be applied immediatly, but theme/dice color changes will only take effect before or after a roll."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"diceBox.updateConfig({configObject})\n")))}c.isMDXComponent=!0}}]);